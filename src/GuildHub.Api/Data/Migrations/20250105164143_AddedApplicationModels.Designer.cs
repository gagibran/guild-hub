// <auto-generated />
using System;
using System.Collections.Generic;
using GuildHub.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace GuildHub.Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250105164143_AddedApplicationModels")]
    partial class AddedApplicationModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GuildHub.Api.Posts.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<NpgsqlTsVector>("SearchTsVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(\"Title\", '') || ' ' || coalesce(\"Content\", ''))", true);

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "GuildHub.Api.Posts.Post.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("TitleName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Title");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SearchTsVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchTsVector"), "GIN");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("GuildHub.Api.Posts.PostReplies.PostReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.ComplexProperty<Dictionary<string, object>>("Content", "GuildHub.Api.Posts.PostReplies.PostReply.Content#Content", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Content");
                        });

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostReplies", (string)null);
                });

            modelBuilder.Entity("GuildHub.Api.Posts.Post", b =>
                {
                    b.OwnsOne("GuildHub.Api.Posts.Content", "Content", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(40000)
                                .HasColumnType("character varying(40000)")
                                .HasColumnName("Content");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.Navigation("Content");
                });

            modelBuilder.Entity("GuildHub.Api.Posts.PostReplies.PostReply", b =>
                {
                    b.HasOne("GuildHub.Api.Posts.Post", "Post")
                        .WithMany("PostReplies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("GuildHub.Api.Posts.Post", b =>
                {
                    b.Navigation("PostReplies");
                });
#pragma warning restore 612, 618
        }
    }
}
